{"ast":null,"code":"var _jsxFileName = \"/home/samarth/Projects/Website/Personal/Presenter_website/Portfolio-website/frontend/samarth_portfolio/src/components/ContentWindow.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ContentWindow.css';\nimport AiTile from './AiTile';\nimport config from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nURL = 'http://127.0.0.1:8000';\n\n// Component for handling project tiles\nfunction ProjectTile({\n  project,\n  currentSlideIndex,\n  setCurrentSlideIndex\n}) {\n  _s();\n  const tileRef = useRef();\n  const logEventToServer = async (eventType, data) => {\n    try {\n      const response = await fetch(URL + '/api/frontend_log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          event_type: eventType,\n          data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error logging event to server:', error);\n    }\n  };\n  const handleNextSlide = () => {\n    if (currentSlideIndex < project.slides.length - 1) {\n      const newIndex = currentSlideIndex + 1;\n      setCurrentSlideIndex(newIndex);\n      // Log event for navigating to the next slide\n      logEventToServer('navigateSlide', {\n        action: 'Next slide',\n        projectId: project.id,\n        slideIndex: newIndex\n      });\n    }\n  };\n  const handlePreviousSlide = () => {\n    if (currentSlideIndex > 0) {\n      const newIndex = currentSlideIndex - 1;\n      setCurrentSlideIndex(newIndex);\n      // Log event for navigating to the previous slide\n      logEventToServer('navigateSlide', {\n        action: 'Previous slide',\n        projectId: project.id,\n        slideIndex: newIndex\n      });\n    }\n  };\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          logEventToServer('slideViewed', {\n            action: 'Slide viewed',\n            projectId: project.id,\n            slideIndex: currentSlideIndex\n          });\n        }\n      });\n    }, {\n      threshold: 0.5\n    });\n    if (tileRef.current) {\n      observer.observe(tileRef.current);\n    }\n    return () => {\n      if (tileRef.current) {\n        observer.unobserve(tileRef.current);\n      }\n    };\n  }, [currentSlideIndex, project.id]);\n  const renderSlideContent = () => {\n    const slide = project.slides[currentSlideIndex];\n    console.log('Slide:', slide);\n    console.log('Slide Type:', slide.slideType);\n    let temp_url = slide.slideInformation;\n    switch (slide.slideType) {\n      case 'text':\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: slide.slideInformation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 24\n        }, this);\n      case 'images':\n        if (!temp_url.startsWith('http')) {\n          temp_url = URL + temp_url;\n        }\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: temp_url,\n          alt: slide.slideDescription,\n          className: \"slide-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 24\n        }, this);\n      case 'video':\n        temp_url = URL + '/media/videos/' + temp_url;\n        return /*#__PURE__*/_jsxDEV(\"video\", {\n          controls: true,\n          src: temp_url,\n          className: \"slide-video\",\n          children: \"Your browser does not support the video tag.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 24\n        }, this);\n      case 'pdfs':\n        temp_url = URL + '/media/pdfs/' + temp_url;\n        return /*#__PURE__*/_jsxDEV(\"object\", {\n          data: temp_url,\n          type: \"application/pdf\",\n          className: \"slide-pdf\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"PDF cannot be displayed. You can download it \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: temp_url,\n              children: \"here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 69\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 24\n        }, this);\n      case 'embeddedLink':\n        return /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: temp_url,\n          title: slide.slideName,\n          className: \"slide-embedded-link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Unsupported slide type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-tile-wrapper\",\n    ref: tileRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile\",\n      id: project.id,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"slide-nav-button left\",\n        onClick: e => {\n          e.stopPropagation();\n          handlePreviousSlide();\n        },\n        disabled: currentSlideIndex === 0,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: project.slides[currentSlideIndex].slideName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide-content\",\n          children: renderSlideContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), project.slides[currentSlideIndex].slideDescription && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide-description\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: project.slides[currentSlideIndex].slideDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"slide-nav-button right\",\n        onClick: e => {\n          e.stopPropagation();\n          handleNextSlide();\n        },\n        disabled: currentSlideIndex === project.slides.length - 1,\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(ProjectTile, \"VJFSd6b/vCWIPukp3HWCNHRw//4=\");\n_c = ProjectTile;\nfunction ContentWindow() {\n  _s2();\n  const [projects, setProjects] = useState([]);\n  const [currentSlideIndices, setCurrentSlideIndices] = useState({});\n  const logEventToServer = async (eventType, data) => {\n    try {\n      const response = await fetch('http://127.0.0.1:8000/api/frontend_log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          event_type: eventType,\n          data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error logging event to server:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch presentation data from the Flask backend\n    fetch('http://127.0.0.1:8000/api/presentations').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Fetched Data:', data); // Log the fetched data to debug JSON structure\n      // Transform the fetched data into the required format for projects\n      const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n        var _slides$, _slides$2;\n        if (!Array.isArray(slides) || slides.length === 0) {\n          console.warn(`Invalid or empty slides for project: ${key}`);\n          return null;\n        }\n        return {\n          id: key,\n          title: ((_slides$ = slides[0]) === null || _slides$ === void 0 ? void 0 : _slides$['Presentation Name']) || 'Untitled Presentation',\n          presentationId: ((_slides$2 = slides[0]) === null || _slides$2 === void 0 ? void 0 : _slides$2['Presentation ID']) || '',\n          slides: slides.map(slide => ({\n            slideId: slide['Slide ID'],\n            slideName: slide['Slide Name'],\n            slideType: slide['Slide Type'],\n            slideInformation: slide['Slide Information'],\n            slideDescription: slide['Slide Description']\n          }))\n        };\n      }).filter(project => project !== null);\n      // Sort projects by presentation ID\n      fetchedProjects.sort((a, b) => a.presentationId - b.presentationId);\n      setProjects(fetchedProjects);\n      // Log event for projects retrieval\n      logEventToServer('projectsRetrieved', {\n        action: 'Projects retrieved successfully',\n        projectList: fetchedProjects\n      });\n      // Initialize slide indices for each project\n      const initialSlideIndices = fetchedProjects.reduce((acc, project) => {\n        acc[project.id] = 0;\n        return acc;\n      }, {});\n      setCurrentSlideIndices(initialSlideIndices);\n    }).catch(error => {\n      console.error('Error fetching presentations:', error);\n      alert('Error fetching presentations. Please check the console for more details.');\n      // Log event for fetch error\n      logEventToServer('fetchError', {\n        action: 'Error fetching presentations',\n        error: error.message\n      });\n    });\n  }, []);\n  const setCurrentSlideIndex = (projectId, index) => {\n    setCurrentSlideIndices(prevIndices => ({\n      ...prevIndices,\n      [projectId]: index\n    }));\n    // Log an event whenever the slide index is updated\n    logEventToServer('slideIndexUpdated', {\n      action: 'Slide index updated',\n      projectId,\n      newIndex: index\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"content-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"ai-presentation\",\n      children: /*#__PURE__*/_jsxDEV(AiTile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"project-tiles\",\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(ProjectTile, {\n        project: project,\n        currentSlideIndex: currentSlideIndices[project.id] || 0,\n        setCurrentSlideIndex: index => setCurrentSlideIndex(project.id, index)\n      }, project.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n}\n_s2(ContentWindow, \"TlalK4Rasfe1QOQQ/clSxv6xdcE=\");\n_c2 = ContentWindow;\nexport default ContentWindow;\n\n// Comments for Logging:\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\n// 5. 'slideViewed': Logged when a slide comes into the visible area (tracked\nvar _c, _c2;\n$RefreshReg$(_c, \"ProjectTile\");\n$RefreshReg$(_c2, \"ContentWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AiTile","config","jsxDEV","_jsxDEV","URL","ProjectTile","project","currentSlideIndex","setCurrentSlideIndex","_s","tileRef","logEventToServer","eventType","data","response","fetch","method","headers","body","JSON","stringify","event_type","ok","Error","status","error","console","handleNextSlide","slides","length","newIndex","action","projectId","id","slideIndex","handlePreviousSlide","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","threshold","current","observe","unobserve","renderSlideContent","slide","log","slideType","temp_url","slideInformation","children","fileName","_jsxFileName","lineNumber","columnNumber","startsWith","src","alt","slideDescription","className","controls","type","href","title","slideName","ref","onClick","e","stopPropagation","disabled","_c","ContentWindow","_s2","projects","setProjects","currentSlideIndices","setCurrentSlideIndices","then","json","fetchedProjects","Object","map","key","_slides$","_slides$2","Array","isArray","warn","presentationId","slideId","filter","sort","a","b","projectList","initialSlideIndices","reduce","acc","catch","alert","message","index","prevIndices","_c2","$RefreshReg$"],"sources":["/home/samarth/Projects/Website/Personal/Presenter_website/Portfolio-website/frontend/samarth_portfolio/src/components/ContentWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ContentWindow.css';\nimport AiTile from './AiTile';\nimport config from './config';\n\nURL = 'http://127.0.0.1:8000';\n\n// Component for handling project tiles\nfunction ProjectTile({ project, currentSlideIndex, setCurrentSlideIndex }) {\n    const tileRef = useRef();\n\n    const logEventToServer = async (eventType, data) => {\n        try {\n            const response = await fetch(URL + '/api/frontend_log', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ event_type: eventType, data }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n        } catch (error) {\n            console.error('Error logging event to server:', error);\n        }\n    };\n\n    const handleNextSlide = () => {\n        if (currentSlideIndex < project.slides.length - 1) {\n            const newIndex = currentSlideIndex + 1;\n            setCurrentSlideIndex(newIndex);\n            // Log event for navigating to the next slide\n            logEventToServer('navigateSlide', { action: 'Next slide', projectId: project.id, slideIndex: newIndex });\n        }\n    };\n\n    const handlePreviousSlide = () => {\n        if (currentSlideIndex > 0) {\n            const newIndex = currentSlideIndex - 1;\n            setCurrentSlideIndex(newIndex);\n            // Log event for navigating to the previous slide\n            logEventToServer('navigateSlide', { action: 'Previous slide', projectId: project.id, slideIndex: newIndex });\n        }\n    };\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        logEventToServer('slideViewed', {\n                            action: 'Slide viewed',\n                            projectId: project.id,\n                            slideIndex: currentSlideIndex,\n                        });\n                    }\n                });\n            },\n            { threshold: 0.5 }\n        );\n\n        if (tileRef.current) {\n            observer.observe(tileRef.current);\n        }\n\n        return () => {\n            if (tileRef.current) {\n                observer.unobserve(tileRef.current);\n            }\n        };\n    }, [currentSlideIndex, project.id]);\n\n    const renderSlideContent = () => {\n        const slide = project.slides[currentSlideIndex];\n        console.log('Slide:', slide);\n        console.log('Slide Type:', slide.slideType);\n        let temp_url = slide.slideInformation;\n        switch (slide.slideType) {\n            case 'text':\n                return <p>{slide.slideInformation}</p>;\n            case 'images':\n                if (!temp_url.startsWith('http')) {\n                    temp_url = URL + temp_url;\n                }\n                return <img src={temp_url} alt={slide.slideDescription} className=\"slide-image\" />;\n            case 'video':\n                temp_url = URL + '/media/videos/' + temp_url;\n                return <video controls src={temp_url} className=\"slide-video\">Your browser does not support the video tag.</video>;\n            case 'pdfs':\n                temp_url = URL + '/media/pdfs/' + temp_url;\n                return <object data={temp_url} type=\"application/pdf\" className=\"slide-pdf\">\n                    <p>PDF cannot be displayed. You can download it <a href={temp_url}>here</a>.</p>\n                </object>;\n            case 'embeddedLink':\n                return <iframe src={temp_url} title={slide.slideName} className=\"slide-embedded-link\"></iframe>;\n            default:\n                return <p>Unsupported slide type</p>;\n        }\n    };\n\n    return (\n        <div className=\"project-tile-wrapper\" ref={tileRef}>\n            <div className=\"tile\" id={project.id}>\n                <button className=\"slide-nav-button left\" onClick={(e) => { e.stopPropagation(); handlePreviousSlide(); }} disabled={currentSlideIndex === 0}>←</button>\n                <div className=\"tile-content\">\n                    <h1>{project.slides[currentSlideIndex].slideName}</h1>\n                    <div className=\"slide-content\">\n                        {renderSlideContent()}\n                    </div>\n                    {project.slides[currentSlideIndex].slideDescription && (\n                        <div className=\"slide-description\">\n                            <p>{project.slides[currentSlideIndex].slideDescription}</p>\n                        </div>\n                    )}\n                </div>\n                <button className=\"slide-nav-button right\" onClick={(e) => { e.stopPropagation(); handleNextSlide(); }} disabled={currentSlideIndex === project.slides.length - 1}>→</button>\n            </div>\n        </div>\n    );\n}\n\nfunction ContentWindow() {\n    const [projects, setProjects] = useState([]);\n    const [currentSlideIndices, setCurrentSlideIndices] = useState({});\n\n    const logEventToServer = async (eventType, data) => {\n        try {\n            const response = await fetch('http://127.0.0.1:8000/api/frontend_log', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ event_type: eventType, data }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n        } catch (error) {\n            console.error('Error logging event to server:', error);\n        }\n    };\n\n    useEffect(() => {\n        // Fetch presentation data from the Flask backend\n        fetch('http://127.0.0.1:8000/api/presentations')\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((data) => {\n                console.log('Fetched Data:', data); // Log the fetched data to debug JSON structure\n                // Transform the fetched data into the required format for projects\n                const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n                    if (!Array.isArray(slides) || slides.length === 0) {\n                        console.warn(`Invalid or empty slides for project: ${key}`);\n                        return null;\n                    }\n                    return {\n                        id: key,\n                        title: slides[0]?.['Presentation Name'] || 'Untitled Presentation',\n                        presentationId: slides[0]?.['Presentation ID'] || '',\n                        slides: slides.map(slide => ({\n                            slideId: slide['Slide ID'],\n                            slideName: slide['Slide Name'],\n                            slideType: slide['Slide Type'],\n                            slideInformation: slide['Slide Information'],\n                            slideDescription: slide['Slide Description'],\n                        }))\n                    };\n                }).filter(project => project !== null);\n                // Sort projects by presentation ID\n                fetchedProjects.sort((a, b) => a.presentationId - b.presentationId);\n                setProjects(fetchedProjects);\n                // Log event for projects retrieval\n                logEventToServer('projectsRetrieved', { action: 'Projects retrieved successfully', projectList: fetchedProjects });\n                // Initialize slide indices for each project\n                const initialSlideIndices = fetchedProjects.reduce((acc, project) => {\n                    acc[project.id] = 0;\n                    return acc;\n                }, {});\n                setCurrentSlideIndices(initialSlideIndices);\n            })\n            .catch((error) => {\n                console.error('Error fetching presentations:', error);\n                alert('Error fetching presentations. Please check the console for more details.');\n                // Log event for fetch error\n                logEventToServer('fetchError', { action: 'Error fetching presentations', error: error.message });\n            });\n    }, []);\n\n    const setCurrentSlideIndex = (projectId, index) => {\n        setCurrentSlideIndices(prevIndices => ({\n            ...prevIndices,\n            [projectId]: index,\n        }));\n        // Log an event whenever the slide index is updated\n        logEventToServer('slideIndexUpdated', { action: 'Slide index updated', projectId, newIndex: index });\n    };\n\n    return (\n        <main className=\"content-window\">\n            <section className=\"ai-presentation\">\n                <AiTile />\n            </section>\n            <section className=\"project-tiles\">\n                {projects.map((project) => (\n                    <ProjectTile\n                        key={project.id}\n                        project={project}\n                        currentSlideIndex={currentSlideIndices[project.id] || 0}\n                        setCurrentSlideIndex={(index) => setCurrentSlideIndex(project.id, index)}\n                    />\n                ))}\n            </section>\n        </main>\n    );\n}\n\nexport default ContentWindow;\n\n// Comments for Logging:\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\n// 5. 'slideViewed': Logged when a slide comes into the visible area (tracked\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}