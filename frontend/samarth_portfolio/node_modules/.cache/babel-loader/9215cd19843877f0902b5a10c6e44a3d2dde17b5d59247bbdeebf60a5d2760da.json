{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./ContentWindow.css';import AiTile from'./AiTile';import config from'./config';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const URL='samarth-ar10.com:8000';// Component for handling project tiles\nfunction ProjectTile(_ref){let{project,currentSlideIndex,setCurrentSlideIndex}=_ref;const tileRef=useRef();const logEventToServer=async(eventType,data)=>{try{const response=await fetch(URL+'/api/frontend_log',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({event_type:eventType,data})});if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}}catch(error){console.error('Error logging event to server:',error);}};const handleNextSlide=()=>{if(currentSlideIndex<project.slides.length-1){const newIndex=currentSlideIndex+1;setCurrentSlideIndex(newIndex);// Log event for navigating to the next slide\nlogEventToServer('navigateSlide',{action:'Next slide',projectId:project.id,slideIndex:newIndex});}};const handlePreviousSlide=()=>{if(currentSlideIndex>0){const newIndex=currentSlideIndex-1;setCurrentSlideIndex(newIndex);// Log event for navigating to the previous slide\nlogEventToServer('navigateSlide',{action:'Previous slide',projectId:project.id,slideIndex:newIndex});}};useEffect(()=>{const observer=new IntersectionObserver(entries=>{entries.forEach(entry=>{if(entry.isIntersecting){logEventToServer('slideViewed',{action:'Slide viewed',projectId:project.id,slideIndex:currentSlideIndex});}});},{threshold:0.5});if(tileRef.current){observer.observe(tileRef.current);}return()=>{if(tileRef.current){observer.unobserve(tileRef.current);}};},[currentSlideIndex,project.id]);const renderSlideContent=()=>{const slide=project.slides[currentSlideIndex];console.log('Slide:',slide);console.log('Slide Type:',slide.slideType);let temp_url=slide.slideInformation;switch(slide.slideType){case'text':return/*#__PURE__*/_jsx(\"p\",{children:slide.slideInformation});// return slide.slideInformation;\ncase'images':temp_url=URL+slide.slideInformation;return/*#__PURE__*/_jsx(\"img\",{src:temp_url,alt:slide.slideDescription,className:\"slide-image media-content\"});case'video':temp_url=URL+slide.slideInformation;return/*#__PURE__*/_jsx(\"video\",{controls:true,src:temp_url,className:\"slide-video media-content\",children:\"Your browser does not support the video tag.\"});case'pdfs':temp_url=URL+slide.slideInformation;return/*#__PURE__*/_jsxs(\"div\",{className:\"pdf-container\",children:[/*#__PURE__*/_jsx(\"embed\",{src:temp_url,type:\"application/pdf\",className:\"slide-pdf media-content\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pdf-overlay\",onClick:()=>window.open(temp_url,'_blank')})]});case'embeddedLink':temp_url=slide.slideInformation;// console.log('Iframe URL:', temp_url); // Log the URL to the console\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"iframe-container\",children:[/*#__PURE__*/_jsx(\"iframe\",{src:temp_url,title:slide.slideName,className:\"slide-embedded-link media-content\"}),/*#__PURE__*/_jsx(\"div\",{className:\"iframe-overlay\",onClick:()=>window.open(temp_url,'_blank')})]});default:return/*#__PURE__*/_jsx(\"p\",{children:\"Unsupported slide type\"});}};return/*#__PURE__*/_jsx(\"div\",{className:\"project-tile-wrapper\",ref:tileRef,children:/*#__PURE__*/_jsxs(\"div\",{className:\"tile\",id:project.id,children:[/*#__PURE__*/_jsx(\"button\",{className:\"slide-nav-button left\",onClick:e=>{e.stopPropagation();handlePreviousSlide();},disabled:currentSlideIndex===0,children:\"\\u2190\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"tile-content\",children:[/*#__PURE__*/_jsx(\"h1\",{children:project.slides[currentSlideIndex].slideName}),/*#__PURE__*/_jsx(\"div\",{className:\"slide-content\",children:renderSlideContent()}),project.slides[currentSlideIndex].slideDescription&&/*#__PURE__*/_jsx(\"div\",{className:\"slide-description\",children:/*#__PURE__*/_jsx(\"p\",{children:project.slides[currentSlideIndex].slideDescription})})]}),/*#__PURE__*/_jsx(\"button\",{className:\"slide-nav-button right\",onClick:e=>{e.stopPropagation();handleNextSlide();},disabled:currentSlideIndex===project.slides.length-1,children:\"\\u2192\"})]})});}function ContentWindow(){const[projects,setProjects]=useState([]);const[currentSlideIndices,setCurrentSlideIndices]=useState({});const logEventToServer=async(eventType,data)=>{try{const response=await fetch(URL+'/api/frontend_log',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({event_type:eventType,data})});if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}}catch(error){console.error('Error logging event to server:',error);}};useEffect(()=>{// Fetch presentation data from the Flask backend\nfetch(URL+'/api/presentations').then(response=>{if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}return response.json();}).then(data=>{console.log('Fetched Data:',data);// Log the fetched data to debug JSON structure\n// Transform the fetched data into the required format for projects\nconst fetchedProjects=Object.entries(data).map(_ref2=>{var _slides$,_slides$2;let[key,slides]=_ref2;if(!Array.isArray(slides)||slides.length===0){console.warn(`Invalid or empty slides for project: ${key}`);return null;}return{id:key,title:((_slides$=slides[0])===null||_slides$===void 0?void 0:_slides$['Presentation Name'])||'Untitled Presentation',presentationId:((_slides$2=slides[0])===null||_slides$2===void 0?void 0:_slides$2['Presentation ID'])||'',slides:slides.map(slide=>({slideId:slide['Slide ID'],slideName:slide['Slide Name'],slideType:slide['Slide Type'],slideInformation:slide['Slide Information'],slideDescription:slide['Slide Description']}))};}).filter(project=>project!==null);// Sort projects by presentation ID\nfetchedProjects.sort((a,b)=>a.presentationId-b.presentationId);setProjects(fetchedProjects);// Log event for projects retrieval\nlogEventToServer('projectsRetrieved',{action:'Projects retrieved successfully',projectList:fetchedProjects});// Initialize slide indices for each project\nconst initialSlideIndices=fetchedProjects.reduce((acc,project)=>{acc[project.id]=0;return acc;},{});setCurrentSlideIndices(initialSlideIndices);}).catch(error=>{console.error('Error fetching presentations:',error);alert('Error fetching presentations. Please check the console for more details.');// Log event for fetch error\nlogEventToServer('fetchError',{action:'Error fetching presentations',error:error.message});});},[]);const setCurrentSlideIndex=(projectId,index)=>{setCurrentSlideIndices(prevIndices=>({...prevIndices,[projectId]:index}));// Log an event whenever the slide index is updated\nlogEventToServer('slideIndexUpdated',{action:'Slide index updated',projectId,newIndex:index});};return/*#__PURE__*/_jsxs(\"main\",{className:\"content-window\",children:[/*#__PURE__*/_jsx(\"section\",{className:\"ai-presentation\",children:/*#__PURE__*/_jsx(AiTile,{})}),/*#__PURE__*/_jsx(\"section\",{className:\"project-tiles\",children:projects.map(project=>/*#__PURE__*/_jsx(ProjectTile,{project:project,currentSlideIndex:currentSlideIndices[project.id]||0,setCurrentSlideIndex:index=>setCurrentSlideIndex(project.id,index)},project.id))})]});}export default ContentWindow;// Comments for Logging:\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\n// 5. 'slideViewed': Logged when a slide comes into the visible area (tracked","map":{"version":3,"names":["React","useState","useEffect","useRef","AiTile","config","jsx","_jsx","jsxs","_jsxs","URL","ProjectTile","_ref","project","currentSlideIndex","setCurrentSlideIndex","tileRef","logEventToServer","eventType","data","response","fetch","method","headers","body","JSON","stringify","event_type","ok","Error","status","error","console","handleNextSlide","slides","length","newIndex","action","projectId","id","slideIndex","handlePreviousSlide","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","threshold","current","observe","unobserve","renderSlideContent","slide","log","slideType","temp_url","slideInformation","children","src","alt","slideDescription","className","controls","type","onClick","window","open","title","slideName","ref","e","stopPropagation","disabled","ContentWindow","projects","setProjects","currentSlideIndices","setCurrentSlideIndices","then","json","fetchedProjects","Object","map","_ref2","_slides$","_slides$2","key","Array","isArray","warn","presentationId","slideId","filter","sort","a","b","projectList","initialSlideIndices","reduce","acc","catch","alert","message","index","prevIndices"],"sources":["/home/samarth/Projects/Website/Personal/Presenter_website/Portfolio-website/frontend/samarth_portfolio/src/components/ContentWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './ContentWindow.css';\nimport AiTile from './AiTile';\nimport config from './config';\n\nconst URL = 'samarth-ar10.com:8000';\n\n// Component for handling project tiles\nfunction ProjectTile({ project, currentSlideIndex, setCurrentSlideIndex }) {\n    const tileRef = useRef();\n\n    const logEventToServer = async (eventType, data) => {\n        try {\n            const response = await fetch(URL + '/api/frontend_log', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ event_type: eventType, data }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n        } catch (error) {\n            console.error('Error logging event to server:', error);\n        }\n    };\n\n    const handleNextSlide = () => {\n        if (currentSlideIndex < project.slides.length - 1) {\n            const newIndex = currentSlideIndex + 1;\n            setCurrentSlideIndex(newIndex);\n            // Log event for navigating to the next slide\n            logEventToServer('navigateSlide', { action: 'Next slide', projectId: project.id, slideIndex: newIndex });\n        }\n    };\n\n    const handlePreviousSlide = () => {\n        if (currentSlideIndex > 0) {\n            const newIndex = currentSlideIndex - 1;\n            setCurrentSlideIndex(newIndex);\n            // Log event for navigating to the previous slide\n            logEventToServer('navigateSlide', { action: 'Previous slide', projectId: project.id, slideIndex: newIndex });\n        }\n    };\n\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            (entries) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting) {\n                        logEventToServer('slideViewed', {\n                            action: 'Slide viewed',\n                            projectId: project.id,\n                            slideIndex: currentSlideIndex,\n                        });\n                    }\n                });\n            },\n            { threshold: 0.5 }\n        );\n\n        if (tileRef.current) {\n            observer.observe(tileRef.current);\n        }\n\n        return () => {\n            if (tileRef.current) {\n                observer.unobserve(tileRef.current);\n            }\n        };\n    }, [currentSlideIndex, project.id]);\n\n    const renderSlideContent = () => {\n        const slide = project.slides[currentSlideIndex];\n        console.log('Slide:', slide);\n        console.log('Slide Type:', slide.slideType);\n        let temp_url = slide.slideInformation;\n        switch (slide.slideType) {\n            case 'text':\n                return <p>{slide.slideInformation}</p>;\n            // return slide.slideInformation;\n            case 'images':\n                temp_url = URL + slide.slideInformation;\n                return <img src={temp_url} alt={slide.slideDescription} className=\"slide-image media-content\" />;\n            case 'video':\n                temp_url = URL + slide.slideInformation;\n                return <video controls src={temp_url} className=\"slide-video media-content\">Your browser does not support the video tag.</video>;\n            case 'pdfs':\n                temp_url = URL + slide.slideInformation;\n                return (\n                    <div className=\"pdf-container\">\n                        <embed src={temp_url} type=\"application/pdf\" className=\"slide-pdf media-content\" />\n                        <div className=\"pdf-overlay\" onClick={() => window.open(temp_url, '_blank')}></div>\n                    </div>\n                );\n            case 'embeddedLink':\n                temp_url = slide.slideInformation;\n                // console.log('Iframe URL:', temp_url); // Log the URL to the console\n                return (\n                    <div className=\"iframe-container\">\n                        <iframe src={temp_url} title={slide.slideName} className=\"slide-embedded-link media-content\"></iframe>\n                        <div className=\"iframe-overlay\" onClick={() => window.open(temp_url, '_blank')}></div>\n                    </div>\n                );\n            default:\n                return <p>Unsupported slide type</p>;\n        }\n    };\n\n    return (\n        <div className=\"project-tile-wrapper\" ref={tileRef}>\n            <div className=\"tile\" id={project.id}>\n                <button className=\"slide-nav-button left\" onClick={(e) => { e.stopPropagation(); handlePreviousSlide(); }} disabled={currentSlideIndex === 0}>←</button>\n                <div className=\"tile-content\">\n                    <h1>{project.slides[currentSlideIndex].slideName}</h1>\n                    <div className=\"slide-content\">\n                        {renderSlideContent()}\n                    </div>\n                    {project.slides[currentSlideIndex].slideDescription && (\n                        <div className=\"slide-description\">\n                            <p>{project.slides[currentSlideIndex].slideDescription}</p>\n                        </div>\n                    )}\n                </div>\n                <button className=\"slide-nav-button right\" onClick={(e) => { e.stopPropagation(); handleNextSlide(); }} disabled={currentSlideIndex === project.slides.length - 1}>→</button>\n            </div>\n        </div>\n    );\n}\n\nfunction ContentWindow() {\n    const [projects, setProjects] = useState([]);\n    const [currentSlideIndices, setCurrentSlideIndices] = useState({});\n\n    const logEventToServer = async (eventType, data) => {\n        try {\n            const response = await fetch(URL + '/api/frontend_log', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ event_type: eventType, data }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n        } catch (error) {\n            console.error('Error logging event to server:', error);\n        }\n    };\n\n    useEffect(() => {\n        // Fetch presentation data from the Flask backend\n        fetch(URL + '/api/presentations')\n            .then((response) => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`);\n                }\n                return response.json();\n            })\n            .then((data) => {\n                console.log('Fetched Data:', data); // Log the fetched data to debug JSON structure\n                // Transform the fetched data into the required format for projects\n                const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n                    if (!Array.isArray(slides) || slides.length === 0) {\n                        console.warn(`Invalid or empty slides for project: ${key}`);\n                        return null;\n                    }\n                    return {\n                        id: key,\n                        title: slides[0]?.['Presentation Name'] || 'Untitled Presentation',\n                        presentationId: slides[0]?.['Presentation ID'] || '',\n                        slides: slides.map(slide => ({\n                            slideId: slide['Slide ID'],\n                            slideName: slide['Slide Name'],\n                            slideType: slide['Slide Type'],\n                            slideInformation: slide['Slide Information'],\n                            slideDescription: slide['Slide Description'],\n                        }))\n                    };\n                }).filter(project => project !== null);\n                // Sort projects by presentation ID\n                fetchedProjects.sort((a, b) => a.presentationId - b.presentationId);\n                setProjects(fetchedProjects);\n                // Log event for projects retrieval\n                logEventToServer('projectsRetrieved', { action: 'Projects retrieved successfully', projectList: fetchedProjects });\n                // Initialize slide indices for each project\n                const initialSlideIndices = fetchedProjects.reduce((acc, project) => {\n                    acc[project.id] = 0;\n                    return acc;\n                }, {});\n                setCurrentSlideIndices(initialSlideIndices);\n            })\n            .catch((error) => {\n                console.error('Error fetching presentations:', error);\n                alert('Error fetching presentations. Please check the console for more details.');\n                // Log event for fetch error\n                logEventToServer('fetchError', { action: 'Error fetching presentations', error: error.message });\n            });\n    }, []);\n\n    const setCurrentSlideIndex = (projectId, index) => {\n        setCurrentSlideIndices(prevIndices => ({\n            ...prevIndices,\n            [projectId]: index,\n        }));\n        // Log an event whenever the slide index is updated\n        logEventToServer('slideIndexUpdated', { action: 'Slide index updated', projectId, newIndex: index });\n    };\n\n    return (\n        <main className=\"content-window\">\n            <section className=\"ai-presentation\">\n                <AiTile />\n            </section>\n            <section className=\"project-tiles\">\n                {projects.map((project) => (\n                    <ProjectTile\n                        key={project.id}\n                        project={project}\n                        currentSlideIndex={currentSlideIndices[project.id] || 0}\n                        setCurrentSlideIndex={(index) => setCurrentSlideIndex(project.id, index)}\n                    />\n                ))}\n            </section>\n        </main>\n    );\n}\n\nexport default ContentWindow;\n\n// Comments for Logging:\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\n// 5. 'slideViewed': Logged when a slide comes into the visible area (tracked\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}