{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samar\\\\OneDrive\\\\project\\\\GitHub\\\\samarth_so\\\\Fenrir_Outer_Website\\\\miruyume_react\\\\frontend\\\\miruyume_react\\\\src\\\\components\\\\ContentWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ContentWindow.css';\nimport AiTile from './AiTile.js';\n\n// Component for handling project tiles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectTile({\n  project,\n  currentSlideIndex,\n  setCurrentSlideIndex\n}) {\n  const logEventToServer = async (eventType, data) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/frontend_log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          event_type: eventType,\n          data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error logging event to server:', error);\n    }\n  };\n  const handleNextSlide = () => {\n    if (currentSlideIndex < project.slides.length - 1) {\n      const newIndex = currentSlideIndex + 1;\n      setCurrentSlideIndex(newIndex);\n      // Log event for navigating to the next slide\n      logEventToServer('navigateSlide', {\n        action: 'Next slide',\n        projectId: project.id,\n        slideIndex: newIndex\n      });\n    }\n  };\n  const handlePreviousSlide = () => {\n    if (currentSlideIndex > 0) {\n      const newIndex = currentSlideIndex - 1;\n      setCurrentSlideIndex(newIndex);\n      // Log event for navigating to the previous slide\n      logEventToServer('navigateSlide', {\n        action: 'Previous slide',\n        projectId: project.id,\n        slideIndex: newIndex\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"project-tile-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tile\",\n      id: project.id,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"slide-nav-button left\",\n        onClick: e => {\n          e.stopPropagation();\n          handlePreviousSlide();\n        },\n        disabled: currentSlideIndex === 0,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: project.slides[currentSlideIndex].slideName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide-information\",\n          children: project.slides[currentSlideIndex].slideInformation && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: project.slides[currentSlideIndex].slideInformation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), project.slides[currentSlideIndex].slideDescription && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slide-description\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: project.slides[currentSlideIndex].slideDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"slide-nav-button right\",\n        onClick: e => {\n          e.stopPropagation();\n          handleNextSlide();\n        },\n        disabled: currentSlideIndex === project.slides.length - 1,\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n_c = ProjectTile;\nfunction ContentWindow() {\n  _s();\n  const [projects, setProjects] = useState([]);\n  const [currentSlideIndices, setCurrentSlideIndices] = useState({});\n  const logEventToServer = async (eventType, data) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/frontend_log', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          event_type: eventType,\n          data\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error logging event to server:', error);\n    }\n  };\n  useEffect(() => {\n    // Fetch presentation data from the Flask backend\n    fetch('http://localhost:5000/api/presentations').then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('Fetched Data:', data); // Log the fetched data to debug JSON structure\n      // Transform the fetched data into the required format for projects\n      const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n        var _slides$;\n        if (!Array.isArray(slides) || slides.length === 0) {\n          console.warn(`Invalid or empty slides for project: ${key}`);\n          return null;\n        }\n        return {\n          id: key,\n          title: ((_slides$ = slides[0]) === null || _slides$ === void 0 ? void 0 : _slides$['Presentation Name']) || 'Untitled Presentation',\n          slides: slides.map(slide => ({\n            slideId: slide['Slide ID'],\n            slideName: slide['Slide Name'],\n            slideType: slide['Slide Type'],\n            slideInformation: slide['Slide Information'],\n            slideDescription: slide['Slide Description']\n          }))\n        };\n      }).filter(project => project !== null);\n      setProjects(fetchedProjects);\n      // Log event for projects retrieval\n      logEventToServer('projectsRetrieved', {\n        action: 'Projects retrieved successfully',\n        projectList: fetchedProjects\n      });\n      // Initialize slide indices for each project\n      const initialSlideIndices = fetchedProjects.reduce((acc, project) => {\n        acc[project.id] = 0;\n        return acc;\n      }, {});\n      setCurrentSlideIndices(initialSlideIndices);\n    }).catch(error => {\n      console.error('Error fetching presentations:', error);\n      alert('Error fetching presentations. Please check the console for more details.');\n      // Log event for fetch error\n      logEventToServer('fetchError', {\n        action: 'Error fetching presentations',\n        error: error.message\n      });\n    });\n  }, []);\n  const setCurrentSlideIndex = (projectId, index) => {\n    setCurrentSlideIndices(prevIndices => ({\n      ...prevIndices,\n      [projectId]: index\n    }));\n    // Log an event whenever the slide index is updated\n    logEventToServer('slideIndexUpdated', {\n      action: 'Slide index updated',\n      projectId,\n      newIndex: index\n    });\n  };\n  const getFirstSlideNames = () => {\n    return projects.map(project => {\n      var _project$slides$;\n      return ((_project$slides$ = project.slides[0]) === null || _project$slides$ === void 0 ? void 0 : _project$slides$.slideName) || 'Untitled Slide';\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"content-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"ai-presentation\",\n      children: /*#__PURE__*/_jsxDEV(AiTile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"project-tiles\",\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(ProjectTile, {\n        project: project,\n        currentSlideIndex: currentSlideIndices[project.id] || 0,\n        setCurrentSlideIndex: index => setCurrentSlideIndex(project.id, index)\n      }, project.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n_s(ContentWindow, \"TlalK4Rasfe1QOQQ/clSxv6xdcE=\");\n_c2 = ContentWindow;\nexport default ContentWindow;\n\n// Comments for Logging:\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\n// 5. 'getFirstSlideNames': Function to get the list of first slide names for all projects.\n// These logs help in tracking user interactions with the slides and debugging issues with data retrieval.\nvar _c, _c2;\n$RefreshReg$(_c, \"ProjectTile\");\n$RefreshReg$(_c2, \"ContentWindow\");","map":{"version":3,"names":["React","useState","useEffect","AiTile","jsxDEV","_jsxDEV","ProjectTile","project","currentSlideIndex","setCurrentSlideIndex","logEventToServer","eventType","data","response","fetch","method","headers","body","JSON","stringify","event_type","ok","Error","status","error","console","handleNextSlide","slides","length","newIndex","action","projectId","id","slideIndex","handlePreviousSlide","className","children","onClick","e","stopPropagation","disabled","fileName","_jsxFileName","lineNumber","columnNumber","slideName","slideInformation","slideDescription","_c","ContentWindow","_s","projects","setProjects","currentSlideIndices","setCurrentSlideIndices","then","json","log","fetchedProjects","Object","entries","map","key","_slides$","Array","isArray","warn","title","slide","slideId","slideType","filter","projectList","initialSlideIndices","reduce","acc","catch","alert","message","index","prevIndices","getFirstSlideNames","_project$slides$","_c2","$RefreshReg$"],"sources":["C:/Users/samar/OneDrive/project/GitHub/samarth_so/Fenrir_Outer_Website/miruyume_react/frontend/miruyume_react/src/components/ContentWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ContentWindow.css';\r\nimport AiTile from './AiTile.js';\r\n\r\n// Component for handling project tiles\r\nfunction ProjectTile({ project, currentSlideIndex, setCurrentSlideIndex }) {\r\n    const logEventToServer = async (eventType, data) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/frontend_log', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ event_type: eventType, data }),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging event to server:', error);\r\n        }\r\n    };\r\n\r\n    const handleNextSlide = () => {\r\n        if (currentSlideIndex < project.slides.length - 1) {\r\n            const newIndex = currentSlideIndex + 1;\r\n            setCurrentSlideIndex(newIndex);\r\n            // Log event for navigating to the next slide\r\n            logEventToServer('navigateSlide', { action: 'Next slide', projectId: project.id, slideIndex: newIndex });\r\n        }\r\n    };\r\n\r\n    const handlePreviousSlide = () => {\r\n        if (currentSlideIndex > 0) {\r\n            const newIndex = currentSlideIndex - 1;\r\n            setCurrentSlideIndex(newIndex);\r\n            // Log event for navigating to the previous slide\r\n            logEventToServer('navigateSlide', { action: 'Previous slide', projectId: project.id, slideIndex: newIndex });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"project-tile-wrapper\">\r\n            <div className=\"tile\" id={project.id}>\r\n                <button className=\"slide-nav-button left\" onClick={(e) => { e.stopPropagation(); handlePreviousSlide(); }} disabled={currentSlideIndex === 0}>←</button>\r\n                <div className=\"tile-content\">\r\n                    <h3>{project.slides[currentSlideIndex].slideName}</h3>\r\n                    <div className=\"slide-information\">\r\n                        {project.slides[currentSlideIndex].slideInformation && (\r\n                            <p>{project.slides[currentSlideIndex].slideInformation}</p>\r\n                        )}\r\n                    </div>\r\n                    {project.slides[currentSlideIndex].slideDescription && (\r\n                        <div className=\"slide-description\">\r\n                            <p>{project.slides[currentSlideIndex].slideDescription}</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <button className=\"slide-nav-button right\" onClick={(e) => { e.stopPropagation(); handleNextSlide(); }} disabled={currentSlideIndex === project.slides.length - 1}>→</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ContentWindow() {\r\n    const [projects, setProjects] = useState([]);\r\n    const [currentSlideIndices, setCurrentSlideIndices] = useState({});\r\n\r\n    const logEventToServer = async (eventType, data) => {\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/frontend_log', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ event_type: eventType, data }),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error logging event to server:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch presentation data from the Flask backend\r\n        fetch('http://localhost:5000/api/presentations')\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                console.log('Fetched Data:', data); // Log the fetched data to debug JSON structure\r\n                // Transform the fetched data into the required format for projects\r\n                const fetchedProjects = Object.entries(data).map(([key, slides]) => {\r\n                    if (!Array.isArray(slides) || slides.length === 0) {\r\n                        console.warn(`Invalid or empty slides for project: ${key}`);\r\n                        return null;\r\n                    }\r\n                    return {\r\n                        id: key,\r\n                        title: slides[0]?.['Presentation Name'] || 'Untitled Presentation',\r\n                        slides: slides.map(slide => ({\r\n                            slideId: slide['Slide ID'],\r\n                            slideName: slide['Slide Name'],\r\n                            slideType: slide['Slide Type'],\r\n                            slideInformation: slide['Slide Information'],\r\n                            slideDescription: slide['Slide Description'],\r\n                        }))\r\n                    };\r\n                }).filter(project => project !== null);\r\n                setProjects(fetchedProjects);\r\n                // Log event for projects retrieval\r\n                logEventToServer('projectsRetrieved', { action: 'Projects retrieved successfully', projectList: fetchedProjects });\r\n                // Initialize slide indices for each project\r\n                const initialSlideIndices = fetchedProjects.reduce((acc, project) => {\r\n                    acc[project.id] = 0;\r\n                    return acc;\r\n                }, {});\r\n                setCurrentSlideIndices(initialSlideIndices);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error fetching presentations:', error);\r\n                alert('Error fetching presentations. Please check the console for more details.');\r\n                // Log event for fetch error\r\n                logEventToServer('fetchError', { action: 'Error fetching presentations', error: error.message });\r\n            });\r\n    }, []);\r\n\r\n    const setCurrentSlideIndex = (projectId, index) => {\r\n        setCurrentSlideIndices(prevIndices => ({\r\n            ...prevIndices,\r\n            [projectId]: index,\r\n        }));\r\n        // Log an event whenever the slide index is updated\r\n        logEventToServer('slideIndexUpdated', { action: 'Slide index updated', projectId, newIndex: index });\r\n    };\r\n\r\n    const getFirstSlideNames = () => {\r\n        return projects.map(project => project.slides[0]?.slideName || 'Untitled Slide');\r\n    };\r\n\r\n    return (\r\n        <main className=\"content-window\">\r\n            <section className=\"ai-presentation\">\r\n                <AiTile />\r\n            </section>\r\n            <section className=\"project-tiles\">\r\n                {projects.map((project) => (\r\n                    <ProjectTile\r\n                        key={project.id}\r\n                        project={project}\r\n                        currentSlideIndex={currentSlideIndices[project.id] || 0}\r\n                        setCurrentSlideIndex={(index) => setCurrentSlideIndex(project.id, index)}\r\n                    />\r\n                ))}\r\n            </section>\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default ContentWindow;\r\n\r\n// Comments for Logging:\r\n// 1. 'navigateSlide': Logged when navigating between slides (either next or previous slide).\r\n// 2. 'projectsRetrieved': Logged when projects are successfully retrieved from the backend.\r\n// 3. 'fetchError': Logged when there's an error fetching presentations from the backend.\r\n// 4. 'slideIndexUpdated': Logged when the current slide index for a project is updated.\r\n// 5. 'getFirstSlideNames': Function to get the list of first slide names for all projects.\r\n// These logs help in tracking user interactions with the slides and debugging issues with data retrieval.\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}