{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samar\\\\OneDrive\\\\project\\\\GitHub\\\\samarth_so\\\\Fenrir_Outer_Website\\\\miruyume_react\\\\frontend\\\\miruyume_react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport StatusBar from './components/StatusBar';\nimport MenuBar from './components/MenuBar';\nimport ContentWindow from './components/ContentWindow';\nimport MessageBar from './components/MessageBar';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const [projects, setProjects] = useState([]);\n  const menuBarRef = useRef();\n  const handleMenuToggle = () => {\n    setMenuOpen(prev => !prev);\n  };\n  useEffect(() => {\n    // Fetch presentation data from the backend (example API call)\n    fetch('http://localhost:5000/api/presentations').then(response => response.json()).then(data => {\n      const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n        var _slides$;\n        if (!Array.isArray(slides) || slides.length === 0) {\n          console.warn(`Invalid or empty slides for project: ${key}`);\n          return null;\n        }\n        return {\n          id: key,\n          title: ((_slides$ = slides[0]) === null || _slides$ === void 0 ? void 0 : _slides$['Presentation Name']) || 'Untitled Presentation',\n          slides: slides.map(slide => ({\n            slideId: slide['Slide ID'],\n            slideName: slide['Slide Name'],\n            slideType: slide['Slide Type'],\n            slideInformation: slide['Slide Information'],\n            slideDescription: slide['Slide Description']\n          }))\n        };\n      }).filter(project => project !== null);\n      setProjects(fetchedProjects);\n    }).catch(error => {\n      console.error('Error fetching presentations:', error);\n    });\n  }, []);\n  useEffect(() => {\n    if (menuBarRef.current && projects.length > 0) {\n      updateMenuItems(projects);\n    }\n  }, [projects]);\n  const updateMenuItems = projects => {\n    if (menuBarRef.current) {\n      const items = projects.map(project => {\n        var _project$slides, _project$slides$;\n        return {\n          logo: null,\n          name: ((_project$slides = project.slides) === null || _project$slides === void 0 ? void 0 : (_project$slides$ = _project$slides[0]) === null || _project$slides$ === void 0 ? void 0 : _project$slides$.slideName) || 'Untitled Slide',\n          extraInfo: null\n        };\n      });\n      menuBarRef.current.updateMenuItems(items);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(StatusBar, {\n      isMenuOpen: isMenuOpen,\n      handleMenuToggle: handleMenuToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MenuBar, {\n      ref: menuBarRef,\n      isOpen: isMenuOpen,\n      toggleMenu: handleMenuToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentWindow, {\n      projects: projects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Q+eGMhHUUz9iABsEMslZRUisL2Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","StatusBar","MenuBar","ContentWindow","MessageBar","jsxDEV","_jsxDEV","App","_s","isMenuOpen","setMenuOpen","projects","setProjects","menuBarRef","handleMenuToggle","prev","fetch","then","response","json","data","fetchedProjects","Object","entries","map","key","slides","_slides$","Array","isArray","length","console","warn","id","title","slide","slideId","slideName","slideType","slideInformation","slideDescription","filter","project","catch","error","current","updateMenuItems","items","_project$slides","_project$slides$","logo","name","extraInfo","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","isOpen","toggleMenu","_c","$RefreshReg$"],"sources":["C:/Users/samar/OneDrive/project/GitHub/samarth_so/Fenrir_Outer_Website/miruyume_react/frontend/miruyume_react/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport StatusBar from './components/StatusBar';\nimport MenuBar from './components/MenuBar';\nimport ContentWindow from './components/ContentWindow';\nimport MessageBar from './components/MessageBar';\nimport './App.css';\n\nfunction App() {\n  const [isMenuOpen, setMenuOpen] = useState(false);\n  const [projects, setProjects] = useState([]);\n  const menuBarRef = useRef();\n\n  const handleMenuToggle = () => {\n    setMenuOpen((prev) => !prev);\n  };\n\n  useEffect(() => {\n    // Fetch presentation data from the backend (example API call)\n    fetch('http://localhost:5000/api/presentations')\n      .then((response) => response.json())\n      .then((data) => {\n        const fetchedProjects = Object.entries(data).map(([key, slides]) => {\n          if (!Array.isArray(slides) || slides.length === 0) {\n            console.warn(`Invalid or empty slides for project: ${key}`);\n            return null;\n          }\n          return {\n            id: key,\n            title: slides[0]?.['Presentation Name'] || 'Untitled Presentation',\n            slides: slides.map(slide => ({\n              slideId: slide['Slide ID'],\n              slideName: slide['Slide Name'],\n              slideType: slide['Slide Type'],\n              slideInformation: slide['Slide Information'],\n              slideDescription: slide['Slide Description'],\n            }))\n          };\n        }).filter(project => project !== null);\n        setProjects(fetchedProjects);\n      })\n      .catch((error) => {\n        console.error('Error fetching presentations:', error);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (menuBarRef.current && projects.length > 0) {\n      updateMenuItems(projects);\n    }\n  }, [projects]);\n\n  const updateMenuItems = (projects) => {\n    if (menuBarRef.current) {\n      const items = projects.map((project) => {\n        return {\n          logo: null,\n          name: project.slides?.[0]?.slideName || 'Untitled Slide',\n          extraInfo: null\n        };\n      });\n      menuBarRef.current.updateMenuItems(items);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <StatusBar isMenuOpen={isMenuOpen} handleMenuToggle={handleMenuToggle} />\n      <MenuBar ref={menuBarRef} isOpen={isMenuOpen} toggleMenu={handleMenuToggle} />\n      <ContentWindow projects={projects} />\n      <MessageBar />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}