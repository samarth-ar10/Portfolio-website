{"ast":null,"code":"// EventLogger.js - Dynamic Event Logging System\n\nclass EventLogger {\n  constructor() {\n    this.events = [];\n    this.listeners = {};\n  }\n\n  // Method to log an event\n  logEvent(eventName, dataType, data) {\n    const event = {\n      timestamp: new Date(),\n      eventName,\n      dataType,\n      data\n    };\n    this.events.push(event);\n    this.notifyListeners(eventName, event);\n    this.sendEventToServer(event);\n  }\n\n  // Method to add a listener for a specific event\n  addListener(eventName, callback) {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n    this.listeners[eventName].push(callback);\n  }\n\n  // Method to remove a listener for a specific event\n  removeListener(eventName, callback) {\n    if (this.listeners[eventName]) {\n      this.listeners[eventName] = this.listeners[eventName].filter(listener => listener !== callback);\n    }\n  }\n\n  // Notify all listeners about an event\n  notifyListeners(eventName, event) {\n    if (this.listeners[eventName]) {\n      this.listeners[eventName].forEach(callback => callback(event));\n    }\n  }\n\n  // Method to retrieve all logged events (optionally filter by event name)\n  getEvents(eventName = null) {\n    if (eventName) {\n      return this.events.filter(event => event.eventName === eventName);\n    }\n    return this.events;\n  }\n\n  // Method to send event to server for logging in a database\n  async sendEventToServer(event) {\n    try {\n      const response = await fetch('http://localhost:5000/api/logEvent', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(event)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Failed to send event to server:', error);\n    }\n  }\n}\n\n// Create a singleton instance of EventLogger\nconst eventLogger = new EventLogger();\nexport default eventLogger;\n\n// Usage example:\n// Import eventLogger and log events from any component or function\n// import eventLogger from './EventLogger';\n\n// Log an event\n// eventLogger.logEvent('buttonClicked', 'interaction', { buttonId: 'submitBtn' });\n\n// Add a listener\n// eventLogger.addListener('buttonClicked', (event) => {\n//   console.log('Button clicked event received:', event);\n// });","map":{"version":3,"names":["EventLogger","constructor","events","listeners","logEvent","eventName","dataType","data","event","timestamp","Date","push","notifyListeners","sendEventToServer","addListener","callback","removeListener","filter","listener","forEach","getEvents","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","error","console","eventLogger"],"sources":["C:/Users/samar/OneDrive/project/GitHub/samarth_so/Fenrir_Outer_Website/miruyume_react/frontend/miruyume_react/src/components/EventLogger.js"],"sourcesContent":["// EventLogger.js - Dynamic Event Logging System\r\n\r\nclass EventLogger {\r\n    constructor() {\r\n      this.events = [];\r\n      this.listeners = {};\r\n    }\r\n  \r\n    // Method to log an event\r\n    logEvent(eventName, dataType, data) {\r\n      const event = {\r\n        timestamp: new Date(),\r\n        eventName,\r\n        dataType,\r\n        data,\r\n      };\r\n      this.events.push(event);\r\n      this.notifyListeners(eventName, event);\r\n      this.sendEventToServer(event);\r\n    }\r\n  \r\n    // Method to add a listener for a specific event\r\n    addListener(eventName, callback) {\r\n      if (!this.listeners[eventName]) {\r\n        this.listeners[eventName] = [];\r\n      }\r\n      this.listeners[eventName].push(callback);\r\n    }\r\n  \r\n    // Method to remove a listener for a specific event\r\n    removeListener(eventName, callback) {\r\n      if (this.listeners[eventName]) {\r\n        this.listeners[eventName] = this.listeners[eventName].filter(\r\n          (listener) => listener !== callback\r\n        );\r\n      }\r\n    }\r\n  \r\n    // Notify all listeners about an event\r\n    notifyListeners(eventName, event) {\r\n      if (this.listeners[eventName]) {\r\n        this.listeners[eventName].forEach((callback) => callback(event));\r\n      }\r\n    }\r\n  \r\n    // Method to retrieve all logged events (optionally filter by event name)\r\n    getEvents(eventName = null) {\r\n      if (eventName) {\r\n        return this.events.filter((event) => event.eventName === eventName);\r\n      }\r\n      return this.events;\r\n    }\r\n  \r\n    // Method to send event to server for logging in a database\r\n    async sendEventToServer(event) {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/logEvent', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(event),\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to send event to server:', error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Create a singleton instance of EventLogger\r\n  const eventLogger = new EventLogger();\r\n  \r\n  export default eventLogger;\r\n  \r\n  // Usage example:\r\n  // Import eventLogger and log events from any component or function\r\n  // import eventLogger from './EventLogger';\r\n  \r\n  // Log an event\r\n  // eventLogger.logEvent('buttonClicked', 'interaction', { buttonId: 'submitBtn' });\r\n  \r\n  // Add a listener\r\n  // eventLogger.addListener('buttonClicked', (event) => {\r\n  //   console.log('Button clicked event received:', event);\r\n  // });\r\n  "],"mappings":"AAAA;;AAEA,MAAMA,WAAW,CAAC;EACdC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACrB;;EAEA;EACAC,QAAQA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IAClC,MAAMC,KAAK,GAAG;MACZC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBL,SAAS;MACTC,QAAQ;MACRC;IACF,CAAC;IACD,IAAI,CAACL,MAAM,CAACS,IAAI,CAACH,KAAK,CAAC;IACvB,IAAI,CAACI,eAAe,CAACP,SAAS,EAAEG,KAAK,CAAC;IACtC,IAAI,CAACK,iBAAiB,CAACL,KAAK,CAAC;EAC/B;;EAEA;EACAM,WAAWA,CAACT,SAAS,EAAEU,QAAQ,EAAE;IAC/B,IAAI,CAAC,IAAI,CAACZ,SAAS,CAACE,SAAS,CAAC,EAAE;MAC9B,IAAI,CAACF,SAAS,CAACE,SAAS,CAAC,GAAG,EAAE;IAChC;IACA,IAAI,CAACF,SAAS,CAACE,SAAS,CAAC,CAACM,IAAI,CAACI,QAAQ,CAAC;EAC1C;;EAEA;EACAC,cAAcA,CAACX,SAAS,EAAEU,QAAQ,EAAE;IAClC,IAAI,IAAI,CAACZ,SAAS,CAACE,SAAS,CAAC,EAAE;MAC7B,IAAI,CAACF,SAAS,CAACE,SAAS,CAAC,GAAG,IAAI,CAACF,SAAS,CAACE,SAAS,CAAC,CAACY,MAAM,CACzDC,QAAQ,IAAKA,QAAQ,KAAKH,QAC7B,CAAC;IACH;EACF;;EAEA;EACAH,eAAeA,CAACP,SAAS,EAAEG,KAAK,EAAE;IAChC,IAAI,IAAI,CAACL,SAAS,CAACE,SAAS,CAAC,EAAE;MAC7B,IAAI,CAACF,SAAS,CAACE,SAAS,CAAC,CAACc,OAAO,CAAEJ,QAAQ,IAAKA,QAAQ,CAACP,KAAK,CAAC,CAAC;IAClE;EACF;;EAEA;EACAY,SAASA,CAACf,SAAS,GAAG,IAAI,EAAE;IAC1B,IAAIA,SAAS,EAAE;MACb,OAAO,IAAI,CAACH,MAAM,CAACe,MAAM,CAAET,KAAK,IAAKA,KAAK,CAACH,SAAS,KAAKA,SAAS,CAAC;IACrE;IACA,OAAO,IAAI,CAACH,MAAM;EACpB;;EAEA;EACA,MAAMW,iBAAiBA,CAACL,KAAK,EAAE;IAC7B,IAAI;MACF,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACnB,KAAK;MAC5B,CAAC,CAAC;MACF,IAAI,CAACa,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;MAC3D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF;AACF;;AAEA;AACA,MAAME,WAAW,GAAG,IAAIjC,WAAW,CAAC,CAAC;AAErC,eAAeiC,WAAW;;AAE1B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}