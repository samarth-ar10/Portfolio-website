{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samar\\\\OneDrive\\\\project\\\\GitHub\\\\samarth_so\\\\Fenrir_Outer_Website\\\\miruyume_react\\\\frontend\\\\miruyume_react\\\\src\\\\components\\\\MenuBar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './MenuBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MenuBar({\n  getProjects\n}) {\n  _s();\n  const [slideNames, setSlideNames] = useState([]);\n  useEffect(() => {\n    // Function to update the slide names based on the current projects order\n    const updateSlideNames = () => {\n      const projects = getProjects();\n      const firstSlideNames = projects.map(project => {\n        var _project$slides$;\n        return ((_project$slides$ = project.slides[0]) === null || _project$slides$ === void 0 ? void 0 : _project$slides$.slideName) || 'Untitled Slide';\n      });\n      setSlideNames(firstSlideNames);\n    };\n\n    // Initial update of slide names\n    updateSlideNames();\n\n    // Set an interval to regularly update the slide names (or you could use another method to trigger updates)\n    const intervalId = setInterval(updateSlideNames, 5000); // Update every 5 seconds\n\n    return () => clearInterval(intervalId); // Cleanup interval on component unmount\n  }, [getProjects]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"menu-bar\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: slideNames.map((slideName, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"menu-item\",\n        children: slideName\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(MenuBar, \"eD/qV71HNXLwZ2FnUNXUK7J8ZJw=\");\n_c = MenuBar;\nexport default MenuBar;\nvar _c;\n$RefreshReg$(_c, \"MenuBar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","MenuBar","getProjects","_s","slideNames","setSlideNames","updateSlideNames","projects","firstSlideNames","map","project","_project$slides$","slides","slideName","intervalId","setInterval","clearInterval","className","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/samar/OneDrive/project/GitHub/samarth_so/Fenrir_Outer_Website/miruyume_react/frontend/miruyume_react/src/components/MenuBar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './MenuBar.css';\r\n\r\nfunction MenuBar({ getProjects }) {\r\n    const [slideNames, setSlideNames] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Function to update the slide names based on the current projects order\r\n        const updateSlideNames = () => {\r\n            const projects = getProjects();\r\n            const firstSlideNames = projects.map(project => project.slides[0]?.slideName || 'Untitled Slide');\r\n            setSlideNames(firstSlideNames);\r\n        };\r\n\r\n        // Initial update of slide names\r\n        updateSlideNames();\r\n\r\n        // Set an interval to regularly update the slide names (or you could use another method to trigger updates)\r\n        const intervalId = setInterval(updateSlideNames, 5000); // Update every 5 seconds\r\n\r\n        return () => clearInterval(intervalId); // Cleanup interval on component unmount\r\n    }, [getProjects]);\r\n\r\n    return (\r\n        <nav className=\"menu-bar\">\r\n            <ul>\r\n                {slideNames.map((slideName, index) => (\r\n                    <li key={index} className=\"menu-item\">\r\n                        {slideName}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default MenuBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,SAASC,OAAOA,CAAC;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;MAC9B,MAAMM,eAAe,GAAGD,QAAQ,CAACE,GAAG,CAACC,OAAO;QAAA,IAAAC,gBAAA;QAAA,OAAI,EAAAA,gBAAA,GAAAD,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,cAAAD,gBAAA,uBAAjBA,gBAAA,CAAmBE,SAAS,KAAI,gBAAgB;MAAA,EAAC;MACjGR,aAAa,CAACG,eAAe,CAAC;IAClC,CAAC;;IAED;IACAF,gBAAgB,CAAC,CAAC;;IAElB;IACA,MAAMQ,UAAU,GAAGC,WAAW,CAACT,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;;IAExD,OAAO,MAAMU,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,CAACZ,WAAW,CAAC,CAAC;EAEjB,oBACIF,OAAA;IAAKiB,SAAS,EAAC,UAAU;IAAAC,QAAA,eACrBlB,OAAA;MAAAkB,QAAA,EACKd,UAAU,CAACK,GAAG,CAAC,CAACI,SAAS,EAAEM,KAAK,kBAC7BnB,OAAA;QAAgBiB,SAAS,EAAC,WAAW;QAAAC,QAAA,EAChCL;MAAS,GADLM,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACpB,EAAA,CA/BQF,OAAO;AAAAuB,EAAA,GAAPvB,OAAO;AAiChB,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}